#include <windows.h>
#include <tchar.h>

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"Window Class Name";
LPCTSTR	IpszWindowName = L"Window Programming Lab";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR IpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;

	WndClass.cbSize = sizeof(WndClass);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = IpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);

	hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW, 0, 0, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hDC;
	HPEN hPen, oldPen;
	HBRUSH hBrush, oldBrush;
	static int x, y;
	static RECT rectView;
	static int speed;

	switch (iMessage) {
	case WM_CREATE:
		GetClientRect(hWnd, &rectView);
		x = 0; y = 0;
		speed = 1000;
	case WM_PAINT:
		hDC = BeginPaint(hWnd, &ps);

		hPen = CreatePen(PS_SOLID, 5, RGB(10, 10, 10));
		oldPen = (HPEN)SelectObject(hDC, hPen);
		hBrush = CreateSolidBrush(RGB(255, 0, 0));
		oldBrush = (HBRUSH)SelectObject(hDC, hBrush);

		Rectangle(hDC, x, y, x + 20, y + 20);

		SelectObject(hDC, oldPen);
		SelectObject(hDC, oldBrush);
		DeleteObject(hPen);
		DeleteObject(hBrush);

		for (int i = 0; i < 21; i++) {
			MoveToEx(hDC, i * 20, 0, NULL);
			LineTo(hDC, i * 20, 500);
		}
		for (int j = 0; j < 26; j++) {
			MoveToEx(hDC, 0, j * 20, NULL);
			LineTo(hDC, 400, j * 20);
		}
		EndPaint(hWnd, &ps);
		break;
	case WM_KEYDOWN:
		if (wParam == 's' || wParam == 'S') {
			SetTimer(hWnd, 1, speed, NULL);
		}
		else if (wParam == 'q' || wParam == 'Q') {
			KillTimer(hWnd, 1);
			PostQuitMessage(0);
			break;
		}
		else if (wParam == VK_RIGHT) {
			if (x + 20 < 400)
				x += 20;
		}
		else if (wParam == VK_LEFT) {
			if (x - 20 > 0)
				x -= 20;
		}
		else if (wParam == VK_DOWN) {
			y += 20;
		}
		break;
	case WM_TIMER:
		switch (wParam) {
		case 1:
			y += 20;
			if (y + 20 > rectView.bottom) {
				x = 780;
				y += 40;
			}
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_LBUTTONDOWN:
		x = LOWORD(lParam);
		y = HIWORD(lParam);
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_DESTROY:
		KillTimer(hWnd, 1);
		KillTimer(hWnd, 2);
		PostQuitMessage(0);
		break;
		}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
	
}
