#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define PROB 1 // 각각의 문제를 구현하고 해당 문제 번호를 변경하여 테스트

#if PROB == 1
// 1번 문제를 해결하기 위한 프로그램 작성

#define TRUE 1
#define FALSE 0
#define MAX_VERTICES 100
#define INF 10000 /* 무한대 (연결이 없는 경우) */

typedef struct GraphType {
	int n; // 정점의 개수
	int weight[MAX_VERTICES][MAX_VERTICES];
} GraphType;

int distance[MAX_VERTICES];/* 시작정점으로부터의 최단경로 거리 */
int found[MAX_VERTICES]; /* 방문한 정점 표시 */
int path[MAX_VERTICES];/* 경유 노드 */

int choose(int distance[], int n, int found[]) {
	int i, min, minpos;
	min = INT_MAX;
	minpos = -1;
	for (i = 0; i < n; i++)
		if (distance[i] < min && !found[i]) {
			min = distance[i];
			minpos = i;
		}
	return minpos;
}

void print_status(GraphType* g, int start, int n) {
	int i;

	printf("STEP %d: distance: ", n + 1);
	for (i = 0; i < g->n; i++) {
		if (distance[i] != INF) {
			if (distance[i] < 10) printf(" ");
			printf(" %d", distance[i]);
		}
		else if (distance[i] == INF) printf("  *");
	}
	printf("\n");
	printf("        found:    ");
	for (i = 0; i < g->n; i++) {
		printf("  %d", found[i]);
	}
	printf("\n\n");
}

void shortest_path(GraphType* g, int start) {
	int i, u, w;
	for (i = 0; i < g->n; i++) /* 초기화 */
	{
		distance[i] = g->weight[start][i];
		found[i] = FALSE;
	}
	found[start] = TRUE; /* 시작 정점 방문 표시 */
	distance[start] = 0;
	for (i = 0; i < g->n - 1; i++) {
		print_status(g, start, i);
		u = choose(distance, g->n, found);
		found[u] = TRUE;
		for (w = 0; w < g->n; w++)
			if (!found[w])
				if (distance[u] + g->weight[u][w] < distance[w]) {
					distance[w] = distance[u] + g->weight[u][w];
					path[w] = u;
				}
	}
	printf("Print Path Array\n");
	printf("INDEX  :");
	for (int i = 0; i < g->n; i++) {
		printf("  %d", i);
	}
	printf("\n");
	printf("Path[i]:");
	for (int i = 0; i < g->n; i++) {
		printf("  %d", path[i]);
	}
	printf("\n\n");
}

void find_path(int path_start, int path_end) {
	printf("-> %d)  ", path_start);
	if (path_end != 0) find_path(path[path_start], path[path_end]);
	printf("(%d->", path_end);
}

void print_path(GraphType* g, int start, int end) {
	printf("(%d", start);
	find_path(path[start], path[end]);
	printf("%d)  ", end);
}

int main(void)
{
	int start, end;

	// test data 1
	GraphType g = { 7,
	{{ 0, 7, INF, INF, 3, 10, INF },
	{ 7, 0, 4, 10, 2, 6, INF },
	{ INF, 4, 0, 2, INF, INF, INF },
	{ INF, 10, 2, 0, 11, 9, 4 },
	{ 3, 2, INF, 11, 0, INF, 5 },
	{ 10, 6, INF, 9, INF, 0, INF },
	{ INF, INF, INF, 4, 5, INF, 0 } }
	};

	// 방향성 그래프에도 적용 가능
	// test data 2
	/*
	GraphType g = {6,
	{{ 0, 50, 45, 10, INF, INF},
	{ INF, 0, 10, 15, INF, INF},
	{ INF, INF, 0, INF, 30, INF},
	{ 20, INF, INF, 0, 15, INF},
	{ INF, 20, 35, INF, 0, INF},
	{ INF, INF, INF, INF, 3, 0}}
	};
	*/

	// test data 3
	/*
	GraphType g = { 7,
	{{ 0, 7, INF, 5,INF, INF, INF},
	{ 7, 0, 8, 9, 7, INF, INF},
	{ INF, 8, 0, INF, 5, INF, INF},
	{ 5, 9, INF, 0, 15, 6, INF },
	{ INF, 7, 5, 15, 0, 8, 9},
	{ INF, INF, INF, 6, 8, 0, 11 },
	{ INF, INF, INF, INF, 9, 11, 0 } }
	};
	//*/

	start = 0; end = 3;
	shortest_path(&g, start);
	printf("\n정점 %d에서 정점 %d까지의 경로 : ", start, end);
	print_path(&g, start, end); // 정점 start에서 정점 end으로 가는 최단경로 출력
	printf(" , 최단 거리 합 = %d \n", distance[end]);
	printf("\n");

	return 0;
}


#elif PROB == 2
// 2번 문제를 해결하기 위한 프로그램 작성

#elif PROB == 3
// 3번 문제를 해결하기 위한 프로그램 작성

#endif
