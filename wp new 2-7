#include <windows.h>
#include <tchar.h>
#include <stdio.h>

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"Window Class Name";
LPCTSTR IpszWindowName = L"Window Programming Lab";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR IpszCmdParam, int nCmdShow)
{
    HWND hWnd;
    MSG Message;
    WNDCLASSEX WndClass;
    g_hInst = hInstance;

    WndClass.cbSize = sizeof(WNDCLASSEX);
    WndClass.style = CS_HREDRAW | CS_VREDRAW;
    WndClass.lpfnWndProc = WndProc;
    WndClass.cbClsExtra = 0;
    WndClass.cbWndExtra = 0;
    WndClass.hInstance = hInstance;
    WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    WndClass.hCursor = LoadCursor(NULL, IDC_IBEAM);
    WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    WndClass.lpszMenuName = NULL;
    WndClass.lpszClassName = IpszClass;
    WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
    RegisterClassEx(&WndClass);

    hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW,
        100, 100, 600, 400, NULL, NULL, hInstance, NULL);

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    while (GetMessage(&Message, NULL, 0, 0)) {
        TranslateMessage(&Message);
        DispatchMessage(&Message);
    }
    return (int)Message.wParam;
}

TCHAR text[10][31] = { 0 };
int x = 0, y = 0;
int insertON = 0;

void ShiftRight(TCHAR* line, int pos) {
    int len = _tcslen(line);
    if (len >= 30) return;
    for (int i = len; i >= pos; i--) {
        line[i + 1] = line[i];
    }
}

void ShiftLeft(TCHAR* line, int pos) {
    int len = _tcslen(line);
    for (int i = pos; i <= len; i++) {
        line[i] = line[i + 1];
    }
}

void DeleteWord(HWND hWnd) {
    int start = x;
    while (start > 0 && text[y][start - 1] != ' ') start--;
    int end = x;
    while (text[y][end] != '\0' && text[y][end] != ' ') end++;
    int length = end - start;
    for (int i = 0; i < length; i++) {
        ShiftLeft(text[y], start);
    }
    x = start;
    InvalidateRect(hWnd, NULL, TRUE);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
    static SIZE size;
    HDC hDC;
    PAINTSTRUCT ps;

    switch (iMessage) {
    case WM_CREATE:
        CreateCaret(hWnd, NULL, 2, 20);
        ShowCaret(hWnd);
        break;
    case WM_CHAR:
        if (wParam == VK_BACK) {
            if (x > 0) {
                ShiftLeft(text[y], x - 1);
                x--;
            }
            else if (y > 0) {
                y--;
                if (_tcslen(text[y]) >= 29) {
                    text[y][29] = '\0';
                }
                x = _tcslen(text[y]);
            }
        }
        else if (wParam == VK_RETURN) {
            x = 0;
            y++;
            if (y >= 10) {
                y = 0;
                text[y][0] = '\0';
            }
        }
        else if (wParam == VK_ESCAPE) {
            for (int i = 0; i < 10; i++) {
                text[i][0] = '\0';
            }
            x = 0;
            y = 0;
        }
        else if (wParam == VK_TAB) {
            for (int i = 0; i < 5; i++) {
                if (_tcslen(text[y]) < 30) {
                    ShiftRight(text[y], x);
                    text[y][x++] = ' ';
                }
            }
        }
        else if (_tcslen(text[y]) < 30 || insertON) {
            if (insertON && _tcslen(text[y]) < 30) {
                ShiftRight(text[y], x);
            }
            text[y][x++] = wParam;
            text[y][x] = '\0';
            if (x >= 30) {
                x = 0;
                y++;
                if (y >= 10) y = 0;
                text[y][0] = '\0';
            }
        }
        
        InvalidateRect(hWnd, NULL, TRUE);
        break;
    case WM_KEYDOWN:
        switch (wParam) {
        case VK_HOME:
            x = 0;
            break;
        case VK_END:
            y = _tcslen(text[y]);
            break;
        case VK_LEFT:
            if (x > 0) x--;
            break;
        case VK_RIGHT:
            if (x < _tcslen(text[y])) x++;
            break;
        case VK_UP:
            y = (y + 9) % 10;
            if (x > _tcslen(text[y])) x = _tcslen(text[y]);
            break;
        case VK_DOWN:
            y = (y + 1) % 10;
            if (x > _tcslen(text[y])) x = _tcslen(text[y]);
            break;
        case VK_PRIOR:
            y = (y + 7) % 10;
            break;
        case VK_NEXT:
            y = (y + 3) % 10;
            break;
        case VK_DELETE:
            DeleteWord(hWnd);
            break;
        case VK_INSERT:
            insertON = !insertON;
            break;
        }
    case WM_PAINT:
        hDC = BeginPaint(hWnd, &ps);
        for (int i = 0; i < 10; i++) {
            TextOut(hDC, 0, i * 20, text[i], _tcslen(text[i]));
        }
        GetTextExtentPoint32(hDC, text[y], x, &size);
        SetCaretPos(size.cx, y * 20);

        EndPaint(hWnd, &ps);
        break;

    case WM_DESTROY:
        HideCaret(hWnd);
        DestroyCaret();
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, iMessage, wParam, lParam);
}
