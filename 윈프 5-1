#include <windows.h>
#include <tchar.h>
#include "resource.h"

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"Window Class Name";
LPCTSTR	IpszWindowName = L"Window Programming Lab";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR IpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;

	WndClass.cbSize = sizeof(WndClass);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = IpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);

	hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW, 0, 0, 1280, 1000, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hDC, hMemDC;
	HPEN hPen, oldPen;
	HBRUSH hBrush, oldBrush;
	static BITMAP bmp;
	static HBITMAP hBitmap;
	static RECT rect;
	static int x = 0, y = 0, mx, my, rx1, ry1, rx2, ry2;
	static int mode = 0, selection = 0, inversion = 0;
	static int halfWidth, onethirdWidth, halfHeight;

	switch (iMessage) {
	case WM_CREATE:
		hBitmap = (HBITMAP)LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BITMAP1));
		GetClientRect(hWnd, &rect);
		GetObject(hBitmap, sizeof(BITMAP), &bmp);
		x = bmp.bmWidth;
		y = bmp.bmHeight;
		halfWidth = rect.right / 2;
		onethirdWidth = rect.right / 3;
		halfHeight = rect.bottom / 2;
		break;
	case WM_PAINT:
		hDC = BeginPaint(hWnd, &ps);
		hMemDC = CreateCompatibleDC(hDC);
		(HBITMAP)SelectObject(hMemDC, hBitmap);
		if (mode == 0) {
			if (!inversion) StretchBlt(hDC, 0, 0, x, y, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion) StretchBlt(hDC, 0, 0, x, y, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
		}
		else if (mode == 1)
			StretchBlt(hDC, 0, 0, rect.right, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
		else if (mode == 2) {
			if (!inversion || selection != 1) StretchBlt(hDC, 0, 0, halfWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 1) StretchBlt(hDC, 0, 0, halfWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 2) StretchBlt(hDC, halfWidth, 0, halfWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 2) StretchBlt(hDC, halfWidth, 0, halfWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
		}
		else if (mode == 3) {
			if (!inversion || selection != 1) StretchBlt(hDC, 0, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 1) StretchBlt(hDC, 0, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 2) StretchBlt(hDC, onethirdWidth, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 2) StretchBlt(hDC, onethirdWidth, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 3) StretchBlt(hDC, onethirdWidth * 2, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 3) StretchBlt(hDC, onethirdWidth * 2, 0, onethirdWidth, rect.bottom, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
		}
		else if (mode == 4) {
			if (!inversion || selection != 1) StretchBlt(hDC, 0, 0, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 1) StretchBlt(hDC, 0, 0, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 2) StretchBlt(hDC, halfWidth, 0, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 2) StretchBlt(hDC, halfWidth, 0, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 3) StretchBlt(hDC, 0, halfHeight, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 3) StretchBlt(hDC, 0, halfHeight, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
			if (!inversion || selection != 4) StretchBlt(hDC, halfWidth, halfHeight, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, SRCCOPY);
			else if (inversion && selection == 4) StretchBlt(hDC, halfWidth, halfHeight, halfWidth, halfHeight, hMemDC, 0, 0, bmp.bmWidth, bmp.bmHeight, NOTSRCCOPY);
		}
		if (selection != 0) {
			if (mode == 0 && selection == 1) {
				rx1 = 0;
				ry1 = 0;
				rx2 = x;
				ry2 = y;
			}
			else if (mode == 2) {
				if (selection == 1) {
					rx1 = 0;
					ry1 = 0;
					rx2 = halfWidth;
					ry2 = rect.bottom;
				}
				if (selection == 2) {
					rx1 = halfWidth;
					ry1 = 0;
					rx2 = rect.right;
					ry2 = rect.bottom;
				}
			}
			else if (mode == 3) {
				if (selection == 1) {
					rx1 = 0;
					ry1 = 0;
					rx2 = onethirdWidth;
					ry2 = rect.bottom;
				}
				else if (selection == 2) {
					rx1 = onethirdWidth;
					ry1 = 0;
					rx2 = onethirdWidth * 2;
					ry2 = rect.bottom;
				}
				else if (selection == 3) {
					rx1 = onethirdWidth * 2;
					ry1 = 0;
					rx2 = rect.right;
					ry2 = rect.bottom;
				}
			}
			else if (mode == 4) {
				if (selection == 1) {
					rx1 = 0;
					ry1 = 0;
					rx2 = halfWidth;
					ry2 = halfHeight;
				}
				else if (selection == 2) {
					rx1 = halfWidth;
					ry1 = 0;
					rx2 = rect.right;
					ry2 = halfHeight;
				}
				else if (selection == 3) {
					rx1 = 0;
					ry1 = halfHeight;
					rx2 = halfWidth;
					ry2 = rect.bottom;
				}
				else if (selection == 4) {
					rx1 = halfWidth;
					ry1 = halfHeight;
					rx2 = rect.right;
					ry2 = rect.bottom;
				}
			}

			hPen = CreatePen(PS_SOLID, 4, RGB(255, 0, 0));
			oldPen = (HPEN)SelectObject(hDC, hPen);
			hBrush = (HBRUSH)GetStockObject(HOLLOW_BRUSH);
			oldBrush = (HBRUSH)SelectObject(hDC, hBrush);

			Rectangle(hDC, rx1, ry1, rx2, ry2);

			SelectObject(hDC, oldPen);
			DeleteObject(hPen);
			SelectObject(hDC, oldBrush);
		}
		
		DeleteDC(hMemDC);
		EndPaint(hWnd, &ps);
		break;
	case WM_CHAR:
		if (wParam == 'a' || wParam == 'A') {
			if (!mode) mode = 1;
			else if (mode) mode = 0;
			selection = 0;
			inversion = 0;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '=') {
			x += 10;
			y += 10;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '-') {
			x -= 10;
			y -= 10;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '1') {
			mode = 0;
			selection = 0;
			inversion = 0;
			x = bmp.bmWidth;
			y = bmp.bmHeight;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '2') {
			mode = 2;
			selection = 0;
			inversion = 0;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '3') {
			mode = 3;
			selection = 0;
			inversion = 0;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == '4') {
			mode = 4;
			selection = 0;
			inversion = 0;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == 'r' || wParam == 'R') {
			if (!inversion) inversion = 1;
			else if (inversion) inversion = 0;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == 'q' || wParam == 'Q') {
			PostQuitMessage(0);
			break;
		}
		break;
	case WM_LBUTTONDOWN:
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		if (mode == 0) {
			if (mx < x && my < y) {
				selection = 1;
			}
		}
		else if (mode == 2) {
			if (mx < halfWidth) {
				selection = 1;
			}
			else if (mx >= halfWidth) {
				selection = 2;
			}
		}
		else if (mode == 3) {
			if (mx < onethirdWidth) {
				selection = 1;
			}
			else if (mx >= onethirdWidth && mx < (onethirdWidth * 2)) {
				selection = 2;
			}
			else if (mx >= (onethirdWidth * 2)) {
				selection = 3;
			}
		}
		else if (mode == 4) {
			if (mx < halfWidth) {
				if (my < halfHeight) {
					selection = 1;
				}
				else if (my >= halfHeight) {
					selection = 3;
				}
			}
			else if (mx >= halfWidth) {
				if (my < halfHeight) {
					selection = 2;
				}
				else if (my >= halfHeight) {
					selection = 4;
				}
			}
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_DESTROY:
		//DeleteObject(hBitmap);
		PostQuitMessage(0);
		break;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}
