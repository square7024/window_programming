#include <windows.h>
#include <tchar.h>
#include "resource.h"

#define MAX_SIZE 5
#define MAX_REMOVED 25

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"Window Class Name";
LPCTSTR IpszWindowName = L"Window Programming Lab";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

// 퍼즐 관련 변수들
static int splitCount = 3;
static int puzzle[MAX_SIZE][MAX_SIZE];
static int emptyX, emptyY;
static int temp;
static BOOL isPuzzleMode = FALSE;
static BOOL isShuffled = FALSE;
static BOOL showHint = FALSE;
static BOOL inverted = FALSE;

// 이미지 및 출력 정보
static HBITMAP hBitmap1, hBitmap2;
static BITMAP bmp1, bmp2;
static int image = 1;
static int winWidth, winHeight;
static int tileWidth, tileHeight;
static int srcTileW, srcTileH;

// 마우스 좌표
static int mx, my;
static int dragStartX, dragStartY;

// 오른쪽 마우스 지우기
static int removedStack[MAX_REMOVED];
static int removedCount = 0;

void ShufflePuzzle() {
	int i, j, k = 0;
	int temp[MAX_SIZE * MAX_SIZE];

	for (i = 0; i < splitCount * splitCount; i++) {
		temp[i] = i;
	}

	for (i = splitCount * splitCount - 1; i > 0; i--) {
		int j = rand() % (i + 1);
		int t = temp[i];
		temp[i] = temp[j];
		temp[j] = t;
	}

	k = 0;
	for (i = 0; i < splitCount; i++) {
		for (j = 0; j < splitCount; j++) {
			puzzle[i][j] = temp[k++];
		}
	}
	isShuffled = TRUE;
	isPuzzleMode = FALSE;
	showHint = FALSE;
}

void StartPuzzle() {
	if (!isShuffled) return;

	for (int y = 0; y < splitCount; y++) {
		for (int x = 0; x < splitCount; x++) {
			if (puzzle[y][x] == splitCount * splitCount - 1) {
				emptyX = x;
				emptyY = y;
				puzzle[y][x] = -1;
				isPuzzleMode = TRUE;
				showHint = FALSE;
				return;
			}
		}
	}
}

BOOL IsPuzzleComplete() {
	int expected = 0;
	for (int y = 0; y < splitCount; y++) {
		for (int x = 0; x < splitCount; x++) {
			if (y == splitCount - 1 && x == splitCount - 1) {
				if (puzzle[y][x] != -1) return FALSE;
			}
			else {
				if (puzzle[y][x] != expected++) return FALSE;
			}
		}
	}
	return TRUE;
}


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR IpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;

	WndClass.cbSize = sizeof(WNDCLASSEX);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1);
	WndClass.lpszClassName = IpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);

	hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW, 0, 0, 1280, 1000, NULL, NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return (int)Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hDC, hMemDC;
	RECT rect;

	switch (iMessage) {
	case WM_CREATE:
		hBitmap1 = (HBITMAP)LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BITMAP1));
		hBitmap2 = (HBITMAP)LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BITMAP2));
		GetObject(hBitmap1, sizeof(BITMAP), &bmp1);
		GetObject(hBitmap2, sizeof(BITMAP), &bmp2);
		break;

	case WM_PAINT:
		hDC = BeginPaint(hWnd, &ps);
		hMemDC = CreateCompatibleDC(hDC);
		SelectObject(hMemDC, image == 1 ? hBitmap1 : hBitmap2);
		GetClientRect(hWnd, &rect);

		winWidth = rect.right;
		winHeight = rect.bottom;

		if (!isPuzzleMode && !isShuffled || showHint) {
			if (inverted) {
				BitBlt(hDC, 0, 0, winWidth, winHeight, hMemDC, 0, 0, NOTSRCCOPY);
			}
			else {
				StretchBlt(hDC, 0, 0, winWidth, winHeight,
					hMemDC, 0, 0,
					image == 1 ? bmp1.bmWidth : bmp2.bmWidth,
					image == 1 ? bmp1.bmHeight : bmp2.bmHeight,
					SRCCOPY);
			}
		}
		else {
			tileWidth = winWidth / splitCount;
			tileHeight = winHeight / splitCount;
			srcTileW = (image == 1 ? bmp1.bmWidth : bmp2.bmWidth) / splitCount;
			srcTileH = (image == 1 ? bmp1.bmHeight : bmp2.bmHeight) / splitCount;

			for (int y = 0; y < splitCount; y++) {
				for (int x = 0; x < splitCount; x++) {
					int piece = puzzle[y][x];
					if (piece == -1) continue;

					int sx = (piece % splitCount) * srcTileW;
					int sy = (piece / splitCount) * srcTileH;
					int dx = x * tileWidth;
					int dy = y * tileHeight;

					if (inverted) {
						HDC tempDC = CreateCompatibleDC(hDC);
						HBITMAP hTempBmp = CreateCompatibleBitmap(hDC, tileWidth, tileHeight);
						SelectObject(tempDC, hTempBmp);

						StretchBlt(tempDC, 0, 0, tileWidth, tileHeight,
							hMemDC, sx, sy, srcTileW, srcTileH, SRCCOPY);
						BitBlt(hDC, dx, dy, tileWidth, tileHeight, tempDC, 0, 0, NOTSRCCOPY);

						DeleteObject(hTempBmp);
						DeleteDC(tempDC);
					}
					else {
						StretchBlt(hDC, dx, dy, tileWidth, tileHeight,
							hMemDC, sx, sy, srcTileW, srcTileH, SRCCOPY);
					}
				}
			}
		}

		DeleteDC(hMemDC);
		EndPaint(hWnd, &ps);
		break;

	case WM_LBUTTONDOWN:
		dragStartX = LOWORD(lParam);
		dragStartY = HIWORD(lParam);
		break;

	case WM_LBUTTONUP:
		if (isPuzzleMode) {
			int dragEndX = LOWORD(lParam);
			int dragEndY = HIWORD(lParam);

			int dx = dragEndX - dragStartX;
			int dy = dragEndY - dragStartY;

			if (abs(dx) > abs(dy)) {
				if (dx > 20 && emptyX > 0) {
					puzzle[emptyY][emptyX] = puzzle[emptyY][emptyX - 1];
					puzzle[emptyY][emptyX - 1] = -1;
					emptyX--;
					InvalidateRect(hWnd, NULL, TRUE);
				}
				else if (dx < -20 && emptyX < splitCount - 1) {
					puzzle[emptyY][emptyX] = puzzle[emptyY][emptyX + 1];
					puzzle[emptyY][emptyX + 1] = -1;
					emptyX++;
					InvalidateRect(hWnd, NULL, TRUE);
				}
			}
			else {
				if (dy > 20 && emptyY > 0) {
					puzzle[emptyY][emptyX] = puzzle[emptyY - 1][emptyX];
					puzzle[emptyY - 1][emptyX] = -1;
					emptyY--;
					InvalidateRect(hWnd, NULL, TRUE);
				}
				else if (dy < -20 && emptyY < splitCount - 1) {
					puzzle[emptyY][emptyX] = puzzle[emptyY + 1][emptyX];
					puzzle[emptyY + 1][emptyX] = -1;
					emptyY++;
					InvalidateRect(hWnd, NULL, TRUE);
				}
			}
			if (IsPuzzleComplete()) {
				MessageBox(hWnd, _T("퍼즐이 완성되었습니다!"), _T("완료"), MB_OK | MB_ICONINFORMATION);
				isPuzzleMode = FALSE;
				isShuffled = FALSE;
			}
		}
		break;

	case WM_RBUTTONDOWN:
		if (isPuzzleMode) {
			int px = LOWORD(lParam) / tileWidth;
			int py = HIWORD(lParam) / tileHeight;

			if (px >= 0 && px < splitCount && py >= 0 && py < splitCount) {
				if (puzzle[py][px] == -1) {
					// 복원
					if (removedCount > 0) {
						puzzle[py][px] = removedStack[--removedCount];
						InvalidateRect(hWnd, NULL, TRUE);
					}
					else {
						MessageBox(hWnd, _T("복원할 조각이 없습니다."), _T("오류"), MB_OK | MB_ICONWARNING);
					}
				}
				else {
					// 제거
					if (removedCount < MAX_REMOVED) {
						removedStack[removedCount++] = puzzle[py][px];
						puzzle[py][px] = -1;
						InvalidateRect(hWnd, NULL, TRUE);
					}
				}
			}
		}
		break;

	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case ID_IMAGE_1:
			image = 1;
			isShuffled = FALSE;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_IMAGE_2:
			image = 2;
			isShuffled = FALSE;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_SPLIT_3:
			splitCount = 3;
			ShufflePuzzle();
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_SPLIT_4:
			splitCount = 4;
			ShufflePuzzle();
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_SPLIT_5:
			splitCount = 5;
			ShufflePuzzle();
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_GAME_START:
			StartPuzzle();
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_GAME_HINT:
			showHint = !showHint;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case ID_GAME_INVERSION:
			inverted = !inverted;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		}
		break;

	case WM_CHAR:
		if (wParam == 'f' || wParam == 'F') {
			showHint = !showHint;
			InvalidateRect(hWnd, NULL, TRUE);
		}
		else if (wParam == 'q' || wParam == 'Q') {
			DeleteObject(hBitmap1);
			DeleteObject(hBitmap2);
			PostQuitMessage(0);
		}
		else if (wParam == 'v' || wParam == 'V') {
			if (isPuzzleMode) {
				for (int y = 0; y < splitCount / 2; y++) {
					for (int x = 0; x < splitCount; x++) {
						temp = puzzle[y][x];
						puzzle[y][x] = puzzle[splitCount - 1 - y][x];
						puzzle[splitCount - 1 - y][x] = temp;
					}
				}
				InvalidateRect(hWnd, NULL, TRUE);
			}
		}
		else if (wParam == 'h' || wParam == 'H') {
			if (isPuzzleMode) {
				for (int y = 0; y < splitCount; y++) {
					for (int x = 0; x < splitCount / 2; x++) {
						temp = puzzle[y][x];
						puzzle[y][x] = puzzle[y][splitCount - 1 - x];
						puzzle[y][splitCount - 1 - x] = temp;
					}
				}
				InvalidateRect(hWnd, NULL, TRUE);
			}
		}
		break;

	case WM_DESTROY:
		DeleteObject(hBitmap1);
		DeleteObject(hBitmap2);
		PostQuitMessage(0);
		break;
	}
	return DefWindowProc(hWnd, iMessage, wParam, lParam);
}
