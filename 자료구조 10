#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define PROB 2 // 각각의 문제를 구현하고 해당 문제 번호를 변경하여 테스트

#if PROB == 1
// 1번 문제를 해결하기 위한 프로그램 작성

typedef struct WORLD_COORDINATE {
	int x;
	int y;
	int z;
} element;

typedef struct STACKNODE {
	element data;
	struct STACKNODE* link;
} StackNode;

typedef struct {
	StackNode* top;
} LinkedlistStack;

void init(LinkedlistStack* s) {
	s->top = NULL;
}

int is_empty(LinkedlistStack* s) {
	return (s->top == NULL);
}

int is_full(LinkedlistStack* s) {
	return 0;
}

void print_stack(LinkedlistStack* s) {
	printf("========스택 내용========\n");
	if (is_empty(s)) {
		printf("( NULL ) <--- TOP\n");
	}
	for (StackNode* p = s->top; p != NULL; p = p->link) {
		printf("( %d, %d, %d)", p->data.x, p->data.y, p->data.z);
		if (p == s->top)
			printf(" <--- TOP");
		printf("\n");
	}
	printf("=========================\n");
}

void push(LinkedlistStack* s, element item) {
	StackNode* temp = (StackNode*)malloc(sizeof(StackNode));
	if (temp == NULL) {
		fprintf(stderr, "메모리 할당 실패\n");
		exit(1);
	}
	temp->data = item;
	temp->link = s->top;
	s->top = temp;
}

element pop(LinkedlistStack* s) {
	if (is_empty(s)) {
		element data = { INT_MIN, INT_MIN, INT_MIN };
		return data;
	}
	else {
		StackNode* temp = s->top;
		element data = temp->data;
		s->top = s->top->link;
		free(temp);
		return data;
	}
}

element peek(LinkedlistStack* s) {
	if (is_empty(s)) {
		fprintf(stderr, "스택이 비어있음\n");
		exit(1);
	}
	return s->top->data;
}

int main(void)
{
	element item;
	LinkedlistStack s;

	init(&s);
	print_stack(&s);
	item.x = 1; item.y = 1; item.z = 1;
	printf("Push item\n");
	push(&s, item); print_stack(&s);
	item.x = 2; item.y = 2; item.z = 2;
	printf("Push item\n");
	push(&s, item); print_stack(&s);
	item.x = 3; item.y = 3; item.z = 3;
	printf("Push item\n");
	push(&s, item); print_stack(&s);
	item.x = 4; item.y = 4; item.z = 4;
	printf("Push item\n");
	push(&s, item); print_stack(&s);
	printf("Peek된 data : (%d, %d, %d)\n", peek(&s).x, peek(&s).y, peek(&s).z); // peek() 함수 추가
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	printf("Peek된 data : (%d, %d, %d)\n", peek(&s).x, peek(&s).y, peek(&s).z); // peek() 함수 추가
	print_stack(&s);
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_stack(&s);
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_stack(&s);
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_stack(&s);
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_stack(&s);
	printf("PoP item\n");
	item = pop(&s);
	printf("PoP된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_stack(&s);
	
	return 0;
}

#elif PROB == 2
// 2번 문제를 해결하기 위한 프로그램 작성

typedef struct WORLD_COORDINATE {
	int x;
	int y;
	int z;
}element;

typedef struct QueueNode {
	element data;
	struct QueueNode* link;
} QueueNode;

typedef struct {
	QueueNode* front, * rear;
} LinkedlistQueue;


void init(LinkedlistQueue* q) {
	q->front = q->rear = NULL;
}

int is_empty(LinkedlistQueue* q) {
	return (q->front == NULL);
}

int is_full(LinkedlistQueue* q) {
	return 0;
}

void print_queue(LinkedlistQueue* q) {
	printf("=========큐 내용=========\n");
	if (is_empty(q)) {
		printf("( NULL ) <--- Front, Rear\n");
	}
	for (QueueNode* p = q->front; p != NULL; p = p->link) {
		printf("( %d, %d, %d)", p->data.x, p->data.y, p->data.z);
		if (p == q->front && p == q->rear) {
			printf(" <--- Front, Rear");
		}
		else if (p == q->front && p != q->rear) {
			printf(" <--- Front");
		}
		else if (p == q->rear && p != q->front) {
			printf(" <--- Rear");
		}
		printf("\n");
	}
	printf("=========================\n");
}

void enqueue(LinkedlistQueue* q, element item) {
	QueueNode* temp = (QueueNode*)malloc(sizeof(QueueNode));
	if (temp == NULL) {
		fprintf(stderr, "메모리 할당 실패\n");
		exit(1);
	}
	temp->data = item;
	temp->link = NULL;
	if (is_empty(q)) {
		q->front = temp;
		q->rear = temp;
	}
	else {
		q->rear->link = temp;
		q->rear = temp;
	}
}

element dequeue(LinkedlistQueue* q) {
	QueueNode* temp = q->front;
	if (is_empty(q)) {
		element data = { INT_MIN, INT_MIN, INT_MIN };
		return data;
	}
	element data;
	data = temp->data;
	q->front = q->front->link;
	if (q->front == NULL)
		q->rear = NULL;
	free(temp);
	return data;
}

int main(void)
{
	element item;
	LinkedlistQueue queue;

	init(&queue); // 큐 초기화
	print_queue(&queue);
	printf("enqueue item \n");
	item.x = 1, item.y = 1, item.z = 1;
	enqueue(&queue, item); print_queue(&queue);
	printf("enqueue item \n");
	item.x = 2, item.y = 2, item.z = 2;
	enqueue(&queue, item); print_queue(&queue);
	printf("enqueue item \n");
	item.x = 3, item.y = 3, item.z = 3;
	enqueue(&queue, item); print_queue(&queue);
	printf("enqueue item \n");
	item.x = 4, item.y = 4, item.z = 4;
	enqueue(&queue, item); print_queue(&queue);
	printf("enqueue item \n");
	item.x = 5, item.y = 5, item.z = 5;
	enqueue(&queue, item); print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	printf("dequeue item\n");
	item = dequeue(&queue);
	printf("Dequeue된 data : (%d, %d, %d) \n", item.x, item.y, item.z);
	print_queue(&queue);
	
	return 0;
}

#endif
