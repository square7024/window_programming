#include <windows.h>
#include <tchar.h>

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"Window Class Name";
LPCTSTR	IpszWindowName = L"Window Programming Lab";

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR IpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASSEX WndClass;
	g_hInst = hInstance;

	WndClass.cbSize = sizeof(WndClass);
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.lpfnWndProc = (WNDPROC)WndProc;
	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance = hInstance;
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.lpszMenuName = NULL;
	WndClass.lpszClassName = IpszClass;
	WndClass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	RegisterClassEx(&WndClass);

	hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW, 0, 0, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&Message, 0, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hDC;
	static int x, y;
	static RECT rectView;
	static int speed;
	static int leftright; //0:right, 1:left, 2:stop
	static int updown; // 0:down, 1:up, 2:stop
	static int current_timer = 0;

	switch (iMessage) {
	case WM_CREATE:
		GetClientRect(hWnd, &rectView);
		x = 20; y = 20;
		leftright = 0;
		updown = 0;
		speed = 100;
	case WM_PAINT:
		hDC = BeginPaint(hWnd, &ps);
		Ellipse(hDC, x - 20, y - 20, x + 20, y + 20);
		for (int i = 0; i < 21; i++) {
			MoveToEx(hDC, i * 40, 0, NULL);
			LineTo(hDC, i * 40, 600);
		}
		for (int j = 0; j < 16; j++) {
			MoveToEx(hDC, 0, j * 40, NULL);
			LineTo(hDC, 800, j * 40);
		}
		EndPaint(hWnd, &ps);
		break;
	case WM_KEYDOWN:
		if (wParam == 'h' || wParam == 'H') {
			current_timer = 1;
			SetTimer(hWnd, 1, speed, NULL);
			KillTimer(hWnd, 2);
		}
		else if (wParam == 'v' || wParam == 'V') {
			current_timer = 2;
			SetTimer(hWnd, 2, speed, NULL);
			KillTimer(hWnd, 1);
		}
		else if (wParam == 'q' || wParam == 'Q') {
			KillTimer(hWnd, 1);
			KillTimer(hWnd, 2);
			PostQuitMessage(0);
			break;
		}
		else if (wParam == 'p' || wParam == 'P') {
			current_timer = 0;
			KillTimer(hWnd, 1);
			KillTimer(hWnd, 2);
		}
		else if (wParam == '=' || wParam == '+') {
			speed += 10;
			if (current_timer == 1) {
				KillTimer(hWnd, 1);
				SetTimer(hWnd, 1, speed, NULL);
			}
			else if (current_timer == 2) {
				KillTimer(hWnd, 2);
				SetTimer(hWnd, 2, speed, NULL);
			}
		}
		else if (wParam == '-' || wParam == '_') {
			speed -= 10;
			if (current_timer == 1) {
				KillTimer(hWnd, 1);
				SetTimer(hWnd, 1, speed, NULL);
			}
			else if (current_timer == 2) {
				KillTimer(hWnd, 2);
				SetTimer(hWnd, 2, speed, NULL);
			}
		}
		break;
	case WM_TIMER:
		switch (wParam) {
		case 1:
			if (leftright == 0)
				x += 40;
			else if (leftright == 1)
				x -= 40;
			if (x + 20 > rectView.right) {
				x = 780;
				y += 40;
				leftright = 1;
			}
			else if (x - 20 < rectView.left) {
				x = 20;
				y = y + 40;
				leftright = 0;
			}
			if (y - 20 > rectView.bottom) {
				y = 20;
				x += 40;
			}
			break;
		case 2:
			if (updown == 0)
				y += 40;
			else if (updown == 1)
				y -= 40;
			if (y + 20 > rectView.bottom) {
				y = 580;
				x += 40;
				updown = 1;
			}
			else if (y - 20 < rectView.top) {
				y = 0;
				x = x + 40;
				updown = 0;
			}
			if (x - 20 > rectView.right) {
				x = 20;
				y += 40;
			}
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_LBUTTONDOWN:
		x = LOWORD(lParam);
		y = HIWORD(lParam);
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_DESTROY:
		KillTimer(hWnd, 1);
		KillTimer(hWnd, 2);
		PostQuitMessage(0);
		break;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}
