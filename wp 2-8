// 필요한 헤더
#include <windows.h>
#include <tchar.h>
#include <string.h>

#define LINES 10
#define COLS 30

HINSTANCE g_hInst;
LPCTSTR IpszClass = L"NotepadClass";
LPCTSTR IpszWindowName = L"Caret-Based Notepad";

TCHAR text[LINES][COLS + 1] = { 0 }; // 텍스트 버퍼
int caretX = 0, caretY = 0;
bool insertMode = false;

// 캐럿 위치 업데이트
void UpdateCaret(HWND hWnd, HDC hDC) {
    SIZE size;
    GetTextExtentPoint32(hDC, text[caretY], caretX, &size);
    SetCaretPos(size.cx, caretY * 20);
}

// 문자열 우측으로 밀기
void ShiftRight(TCHAR* line, int from) {
    int len = _tcslen(line);
    if (len >= COLS) return;
    for (int i = len; i >= from; i--) {
        line[i + 1] = line[i];
    }
}

// 문자열 좌측으로 당기기
void ShiftLeft(TCHAR* line, int from) {
    int len = _tcslen(line);
    for (int i = from; i <= len; i++) {
        line[i] = line[i + 1];
    }
}

// 단어 삭제
void DeleteWord(HWND hWnd) {
    int start = caretX;
    while (start > 0 && text[caretY][start - 1] != ' ') start--;
    int end = caretX;
    while (text[caretY][end] != '\0' && text[caretY][end] != ' ') end++;
    int length = end - start;
    for (int i = 0; i < length; i++) {
        ShiftLeft(text[caretY], start);
    }
    caretX = start;
    InvalidateRect(hWnd, NULL, TRUE);
}

// 메인 윈도우 프로시저
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    HDC hDC;
    PAINTSTRUCT ps;
    SIZE size;

    switch (msg) {
    case WM_CREATE:
        CreateCaret(hWnd, NULL, 2, 20);
        ShowCaret(hWnd);
        break;

    case WM_CHAR:
        if (wParam == VK_BACK) {
            if (caretX > 0) {
                ShiftLeft(text[caretY], caretX - 1);
                caretX--;
            }
            else if (caretY > 0) {
                caretY--;
                caretX = _tcslen(text[caretY]);
            }
        }
        else if (wParam == VK_RETURN) {
            caretY = (caretY + 1) % LINES;
            caretX = 0;
        }
        else if (wParam == VK_TAB) {
            for (int i = 0; i < 5; i++) {
                if (_tcslen(text[caretY]) < COLS) {
                    ShiftRight(text[caretY], caretX);
                    text[caretY][caretX++] = ' ';
                }
            }
        }
        else if (wParam == 27) { // ESC
            memset(text, 0, sizeof(text));
            caretX = caretY = 0;
        }
        else if (wParam >= 32 && wParam <= 126) {
            if (_tcslen(text[caretY]) < COLS || insertMode) {
                if (insertMode && _tcslen(text[caretY]) < COLS) {
                    ShiftRight(text[caretY], caretX);
                }
                text[caretY][caretX++] = (TCHAR)wParam;
                if (caretX >= COLS) {
                    caretX = 0;
                    caretY = (caretY + 1) % LINES;
                }
            }
        }
        InvalidateRect(hWnd, NULL, TRUE);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_HOME:
            caretX = 0;
            break;
        case VK_END:
            caretX = _tcslen(text[caretY]);
            break;
        case VK_INSERT:
            insertMode = !insertMode;
            break;
        case VK_DELETE:
            DeleteWord(hWnd);
            break;
        case VK_LEFT:
            if (caretX > 0) caretX--;
            break;
        case VK_RIGHT:
            if (caretX < _tcslen(text[caretY])) caretX++;
            break;
        case VK_UP:
            caretY = (caretY + LINES - 1) % LINES;
            if (caretX > _tcslen(text[caretY])) caretX = _tcslen(text[caretY]);
            break;
        case VK_DOWN:
            caretY = (caretY + 1) % LINES;
            if (caretX > _tcslen(text[caretY])) caretX = _tcslen(text[caretY]);
            break;
        case VK_PRIOR: // Page Up
            caretY = (caretY + LINES - 3) % LINES;
            break;
        case VK_NEXT: // Page Down
            caretY = (caretY + 3) % LINES;
            break;
        }
        InvalidateRect(hWnd, NULL, TRUE);
        break;

    case WM_PAINT:
        hDC = BeginPaint(hWnd, &ps);
        for (int i = 0; i < LINES; i++) {
            TextOut(hDC, 0, i * 20, text[i], _tcslen(text[i]));
        }
        UpdateCaret(hWnd, hDC);
        EndPaint(hWnd, &ps);
        break;

    case WM_DESTROY:
        HideCaret(hWnd);
        DestroyCaret();
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

// WinMain
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    HWND hWnd;
    MSG msg;
    WNDCLASSEX wcex;

    g_hInst = hInstance;

    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(NULL, IDC_IBEAM);
    wcex.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = IpszClass;
    wcex.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
    RegisterClassEx(&wcex);

    hWnd = CreateWindow(IpszClass, IpszWindowName, WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 600, 300, NULL, NULL, hInstance, NULL);

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return (int)msg.wParam;
}
