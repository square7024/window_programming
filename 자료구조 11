#include <stdio.h>
#include <stdlib.h>

// 포인터로 이진트리 구성
typedef struct TreeNode {
	int data;
	struct TreeNode* left, * right;
} TreeNode;

// Full Binary Tree node number 1~15(root : 1)
TreeNode n15 = { 15, NULL, NULL };//           1  
TreeNode n14 = { 14, NULL, NULL };//    2               3
TreeNode n13 = { 13, NULL, NULL };// 4     5        6       7
TreeNode n12 = { 12, NULL, NULL };//8 9   10 11   12 13   14 15
TreeNode n11 = { 11, NULL, NULL };
TreeNode n10 = { 10, NULL, NULL };
TreeNode n9 = { 9, NULL, NULL };
TreeNode n8 = { 8, NULL, NULL };
TreeNode n7 = { 7, &n14, &n15 };
TreeNode n6 = { 6, &n12, &n13 };
TreeNode n5 = { 5, &n10, &n11 };
TreeNode n4 = { 4, &n8, &n9 };
TreeNode n3 = { 3, &n6, &n7 };
TreeNode n2 = { 2, &n4, &n5 };
TreeNode n1 = { 1, &n2, &n3 };
TreeNode* root = &n1;

// 배열로 이진트리 구성
typedef struct NODE { int data; int leaf; } node; // leaf의 값이 1이면 child가 있음
// Full Binary Tree node number 1~15(root 1, left child n*2, right child n*2+1
node arr[] = { {0,0}, {1,1}, {2,1}, {3,1}, {4,1}, {5,1}, {6,1}, {7,1}, {8,0}, {9,0}, {10,0}, {11,0},
{12,0}, {13,0}, {14,0}, {15,0} };

void inorder_rec(TreeNode* root) {
	if (root) {
		inorder_rec(root->left);
		printf("[%d] ", root->data);
		inorder_rec(root->right);
	}
}

void preorder_rec(TreeNode* root) {
	if (root) {
		printf("%d ", root->data);
		preorder_rec(root->left);
		preorder_rec(root->right);
	}
}

void postorder_rec(TreeNode* root) {
	if (root) {
		postorder_rec(root->left);
		postorder_rec(root->right);
		printf("%d ", root->data);
	}
}

void inorder_rec_arr(node* arr,int root) {
	if (arr[root].leaf) {
		inorder_rec_arr(arr, root * 2);
		printf("[%d] ", arr[root].data);
		inorder_rec_arr(arr, (root * 2) + 1);
	}
	else 
}

int main(void)
{
	printf("중위 순회(rec) =");
	inorder_rec(root);
	printf("\n");
	printf("중위 순회(itr) =");
	//inorder_iter(root);
	printf("\n");
	printf("배열 중위 순회(rec)=");
	inorder_rec_arr(arr, 1);
	printf("\n\n");
	/*
	printf("전위 순회(rec) =");
	preorder_rec(root);
	printf("\n");
	printf("전위 순회(itr) =");
	preorder_iter(root);
	printf("\n");
	printf("배열 전위 순회(rec)=");
	preorder_rec_arr(arr, 1);

	printf("\n\n");
	printf("후위 순회(rec) =");
	postorder_rec(root);
	printf("\n");
	printf("후위 순회(itr) =");
	postorder_iter(root);
	printf("\n");
	printf("배열 후위 순회(rec)=");
	postorder_rec_arr(arr, 1);
	printf("\n\n");
	*/
	return 0;
}
